# same now try abd load my data:
path=file.path('G:')#''G:'+os.sep+'My Drive'+os.sep+'SECRET-ITN'+os.sep+'Projects'+os.sep+'network_signing'+os.sep'
path
# same now try abd load my data:
path=file.path('G:','My Drive','SECRET-ITN','Projects','network_signing')
# same now try abd load my data:
path=file.path('G:','My Drive','SECRET-ITN','Projects','kidney')
filepath=file.path(path,'features','features.csv')
filepath=file.path(path,'features','kidney_features.csv')
features=read.csv(filepath)
View(features)
View(features)
#since I need labels to be in the same dataframe as features, and I have them for a twist of faith
# i dont need to use the labels file
# change variable name
names(df)[names(df) == 'X'] <- 'y'
df=read.csv(filepath)
# same now try abd load my data:
path=file.path('G:','My Drive','SECRET-ITN','Projects','kidney')
filepath=file.path(path,'features','kidney_features.csv')
df=read.csv(filepath)
#since I need labels to be in the same dataframe as features, and I have them for a twist of faith
# i dont need to use the labels file
# change variable name
names(df)[names(df) == 'X'] <- 'y'
View(df)
df$y
df$y[15]
df$y[16]
22-15
y=c(rep(0,15),rep(1,7))
df$y=y
View(df)
# 1 split file in train and test
data2 = sort(sample(nrow(df), nrow(df)*.7))
#creating training data set by selecting the output row values
train <- df[data2,]
#creating test data set by not selecting the output row values
test <- df[-data2,]
# 2 train a logreg on train data (all features)
classifier=glm(y~. , family='binomial', data=df)
?predict
# 4 plot ROC
roc.plot(test$y, ypred)
# plot roc
library(verification)
# 4 plot ROC
roc.plot(test$y, ypred)
# 2 train a logreg on train data (all features)
classifier=glm(y~. , family='binomial', data=df)
# 3 predict on test and plot auc
ypred = predict(classifier, test, type='response')
# 4 plot ROC
roc.plot(test$y, ypred)
### Select top three features with SDA and predict
library(sda)
features_only = subset(df, select = -c(y))
ranked_features=sda.ranking(features_only,df$y)
ranked_features=sda.ranking(matrix(features_only),df$y)
as.factor(df$y)
ranked_features=sda.ranking(matrix(features_only),as.factor(df$y)) # features must be matrix,  label must be factor
?sda.ranking
as.factor(df$y)
length(as.factor(df$y))
dim(matrix(features_only))
dim(features_only)
features_only=data.matrix(features_only)
ranked_features=sda.ranking(features_only,as.factor(df$y)) # features must be matrix,  label must be factor
plot.sda.ranking(ranked_features, top=3)
features_only$Gene.names
df$Gene.names
# same now try abd load my data:
path=file.path('G:','My Drive','SECRET-ITN','Projects','kidney')
filepath=file.path(path,'features','kidney_features.csv')
df=read.csv(filepath)
#since I need labels to be in the same dataframe as features, and I have them for a twist of faith
# i dont need to use the labels file
# change variable name
names(df)[names(df) == 'X'] <- 'y'
df$y[16]
y=c(rep(0,15),rep(1,7))  # 0 = chronic rejection, 1 = rejection
df$y=y
genenames=df$Gene.names
subset(df, select = -c(Gene.names))
# 1 split file in train and test
data2 = sort(sample(nrow(df), nrow(df)*.7))
#creating training data set by selecting the output row values
train <- df[data2,]
#creating test data set by not selecting the output row values
test <- df[-data2,]
# 2 train a logreg on train data (all features)
classifier=glm(y~. , family='binomial', data=df)
# 3 predict on test and plot auc
ypred = predict(classifier, test, type='response')
# 4 plot ROC
roc.plot(test$y, ypred)
### Select top three features with SDA and predict
library(sda)
features_only = subset(df, select = -c(y))
features_only=data.matrix(features_only)
ranked_features=sda.ranking(features_only,as.factor(df$y)) # features must be matrix,  label must be factor
plot.sda.ranking(ranked_features, top=3)
df=read.csv(filepath)
#since I need labels to be in the same dataframe as features, and I have them for a twist of faith
# i dont need to use the labels file
# change variable name
names(df)[names(df) == 'X'] <- 'y'
df$y[16]
y=c(rep(0,15),rep(1,7))  # 0 = chronic rejection, 1 = rejection
df$y=y
genenames=df$Gene.names
df = subset(df, select = -c(Gene.names))
# 1 split file in train and test
data2 = sort(sample(nrow(df), nrow(df)*.7))
#creating training data set by selecting the output row values
train <- df[data2,]
#creating test data set by not selecting the output row values
test <- df[-data2,]
# 2 train a logreg on train data (all features)
classifier=glm(y~. , family='binomial', data=df)
# 3 predict on test and plot auc
ypred = predict(classifier, test, type='response')
# 4 plot ROC
roc.plot(test$y, ypred)
### Select top three features with SDA and predict
library(sda)
features_only = subset(df, select = -c(y))
features_only=data.matrix(features_only)
ranked_features=sda.ranking(features_only,as.factor(df$y)) # features must be matrix,  label must be factor
plot.sda.ranking(ranked_features, top=3)
features_only = as.data.frame(scale(features_only))
features_only=data.matrix(features_only)
ranked_features=sda.ranking(features_only,as.factor(df$y)) # features must be matrix,  label must be factor
plot.sda.ranking(ranked_features, top=3)
features_only = subset(df, select = -c(y))
features_only=data.matrix(features_only)
ranked_features=sda.ranking(features_only,as.factor(df$y)) # features must be matrix,  label must be factor
plot.sda.ranking(ranked_features, top=3)
View(features_only)
features_only = subset(df, select = -c(y))
features_only = as.data.frame(scale(features_only))
View(features_only)
features_only=data.matrix(features_only)
ranked_features=sda.ranking(features_only,as.factor(df$y)) # features must be matrix,  label must be factor
plot.sda.ranking(ranked_features, top=3)
# top 3 (SENZA STANDARDIZATION e con standardization non cambia): IGHG4 FCN1 IGLC7
top3=c('IGHG4','FCN1','IGLC7')
#Train and test with these variables only
classifier=glm(y~. , family='binomial', data=subset(df, select = c(top3, y)))
#Train and test with these variables only
subset(df, select = top3)
#Train and test with these variables only
subset(df, select = c(top3,'y'))
#Train and test with these variables only
classifier=glm(y~. , family='binomial', data=subset(df, select = c(top3, 'y')))
# 3 predict on test and plot auc
ypred = predict(classifier, test, type='response')
# 4 plot ROC
roc.plot(test$y, ypred)
prod(seq(2, 10, by=2))
(seq(2, 10, by=2)
)
seq(1, 10, by=2)
help(seq)
בךקשר
clearPushBack()
clear()
source("modules/config.R")
source("modules/drug_signature/setuper/LINCSExperimentMetaDataSetuper.R")
source("modules/LINCS_export/LINCSExperimentDataRowsLoader.R")
source("modules/LINCS_export/LINCSExportByGeneList.R")
lincsExperimentMetaDataSetuper <- LINCSExperimentMetaDataSetuper$new(drug_signature_cfg$experiments_meta_data_filename)
lincsExperimentDataRowsLoader <- LINCSExperimentDataRowsLoader$new(drug_signature_cfg$experiments_data_filename)
lincsExportByGeneList <- LINCSExportByGeneList$new(lincsExperimentDataRowsLoader, drug_signature_cfg$lincs_splitted_level3_dir)
bing_genes <- read.table("data/LINCS-GSE92742/bing_genes.csv", sep = ";", header = T)
experiments_env <- lincsExperimentMetaDataSetuper$setup(c("6", "24"))
block_size <- 100
gene_index <- 1
tot_genes <- length(bing_genes$pr_gene_id) # 10174
setwd("G:/My Drive/unict 2024-25/drug_repurposing")
source("modules/config.R")
source("modules/drug_signature/setuper/LINCSExperimentMetaDataSetuper.R")
source("modules/LINCS_export/LINCSExperimentDataRowsLoader.R")
source("modules/LINCS_export/LINCSExportByGeneList.R")
lincsExperimentMetaDataSetuper <- LINCSExperimentMetaDataSetuper$new(drug_signature_cfg$experiments_meta_data_filename)
lincsExperimentDataRowsLoader <- LINCSExperimentDataRowsLoader$new(drug_signature_cfg$experiments_data_filename)
lincsExportByGeneList <- LINCSExportByGeneList$new(lincsExperimentDataRowsLoader, drug_signature_cfg$lincs_splitted_level3_dir)
bing_genes <- read.table("data/LINCS-GSE92742/bing_genes.csv", sep = ";", header = T)
experiments_env <- lincsExperimentMetaDataSetuper$setup(c("6", "24"))
block_size <- 100
gene_index <- 1
tot_genes <- length(bing_genes$pr_gene_id) # 10174
tot_genes <- 100
print(sprintf("computation from index: %s to index: %s", gene_index, tot_genes))
while (gene_index <= tot_genes) {
ext_sup <- min(gene_index + block_size - 1, tot_genes)
lincsExportByGeneList$export(bing_genes, experiments_env, gene_index, ext_sup)
gene_index <- gene_index + block_size
}
View(LINCSExportByGeneList)
View(LINCSExportByGeneList)
View(lincsExportByGeneList)
View(lincsExportByGeneList)
View(LINCSExperimentMetaDataSetuper)
